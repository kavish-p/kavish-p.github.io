"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[187],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>h});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,s=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),u=p(n),h=r,d=u["".concat(s,".").concat(h)]||u[h]||m[h]||l;return n?a.createElement(d,i(i({ref:t},c),{},{components:n})):a.createElement(d,i({ref:t},c))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,i=new Array(l);i[0]=u;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:r,i[1]=o;for(var p=2;p<l;p++)i[p]=n[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},7999:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>m,frontMatter:()=>l,metadata:()=>o,toc:()=>p});var a=n(7462),r=(n(7294),n(3905));const l={},i="Helm",o={unversionedId:"kubernetes/helm",id:"kubernetes/helm",title:"Helm",description:"Artifact Hub",source:"@site/docs/kubernetes/helm.md",sourceDirName:"kubernetes",slug:"/kubernetes/helm",permalink:"/kubernetes/helm",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Kubernetes",permalink:"/category/kubernetes"},next:{title:"Static Code Analysis",permalink:"/category/static-code-analysis"}},s={},p=[{value:"Artifact Hub",id:"artifact-hub",level:2},{value:"Add Helm Repository",id:"add-helm-repository",level:2},{value:"Search Repo",id:"search-repo",level:2},{value:"Obtain Information about Chart",id:"obtain-information-about-chart",level:2},{value:"Install Chart",id:"install-chart",level:2},{value:"List Deployed Releases",id:"list-deployed-releases",level:2},{value:"Uninstall a Release",id:"uninstall-a-release",level:2},{value:"Create Helm Chart",id:"create-helm-chart",level:2},{value:"Example Template",id:"example-template",level:2}],c={toc:p};function m(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"helm"},"Helm"),(0,r.kt)("h2",{id:"artifact-hub"},"Artifact Hub"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://artifacthub.io/packages/search?kind=0"},"https://artifacthub.io/packages/search?kind=0")),(0,r.kt)("h2",{id:"add-helm-repository"},"Add Helm Repository"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"helm repo add bitnami https://charts.bitnami.com/bitnami\n")),(0,r.kt)("h2",{id:"search-repo"},"Search Repo"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"helm search repo bitnami\n")),(0,r.kt)("h2",{id:"obtain-information-about-chart"},"Obtain Information about Chart"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"helm show chart bitnami/mysql\nhelm show all bitnami/mysql\n")),(0,r.kt)("h2",{id:"install-chart"},"Install Chart"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"helm repo update              # Make sure we get the latest list of charts\nhelm install bitnami/mysql --generate-name\n")),(0,r.kt)("p",null,"Whenever you install a chart, a new release is created. So one chart can be installed multiple times into the same cluster. And each can be independently managed and upgraded."),(0,r.kt)("h2",{id:"list-deployed-releases"},"List Deployed Releases"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"helm list\n")),(0,r.kt)("h2",{id:"uninstall-a-release"},"Uninstall a Release"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"helm uninstall mysql-1612624192\n")),(0,r.kt)("p",null,"This will uninstall mysql-1612624192 from Kubernetes, which will remove all resources associated with the release as well as the release history.\nIf the flag --keep-history is provided, release history will be kept. You will be able to request information about that release:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"helm status mysql-1612624192\n")),(0,r.kt)("p",null,"Because Helm tracks your releases even after you've uninstalled them, you can audit a cluster's history, and even undelete a release (with ",(0,r.kt)("inlineCode",{parentName:"p"},"helm rollback"),")."),(0,r.kt)("h2",{id:"create-helm-chart"},"Create Helm Chart"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"helm create kavishapp\n")),(0,r.kt)("p",null,"Below is an example of the file structure expected by Helm"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"wordpress/\n  Chart.yaml          # A YAML file containing information about the chart\n  LICENSE             # OPTIONAL: A plain text file containing the license for the chart\n  README.md           # OPTIONAL: A human-readable README file\n  values.yaml         # The default configuration values for this chart\n  values.schema.json  # OPTIONAL: A JSON Schema for imposing a structure on the values.yaml file\n  charts/             # A directory containing any charts upon which this chart depends.\n  crds/               # Custom Resource Definitions\n  templates/          # A directory of templates that, when combined with values,\n                      # will generate valid Kubernetes manifest files.\n  templates/NOTES.txt # OPTIONAL: A plain text file containing short usage notes\n")),(0,r.kt)("h2",{id:"example-template"},"Example Template"),(0,r.kt)("p",null,"Regular Manifest"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: zaqar\n  namespace: default\n  labels:\n    app: zaqar\n    version: v1.0.0\n    env: production\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: zaqar\n      env: production\n  template:\n    metadata:\n      labels:\n        app: zaqar\n        version: v1.0.0\n        env: production\n    spec:\n      containers:\n        - name: zaqar\n          image: "khaosdoctor/zaqar:v1.0.0"\n          imagePullPolicy: IfNotPresent\n          env:\n            - name: SENDGRID_APIKEY\n              value: "MY_SECRET_KEY"\n            - name: DEFAULT_FROM_ADDRESS\n              value: "my@email.com"\n            - name: DEFAULT_FROM_NAME\n              value: "Lucas Santos"\n          ports:\n            - name: http\n              containerPort: 3000\n              protocol: TCP\n          resources:\n            requests:\n              cpu: 100m\n              memory: 128Mi\n            limits:\n              cpu: 250m\n              memory: 256Mi\n')),(0,r.kt)("p",null,"Helm Template"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: zaqar\n  namespace: default\n  labels:\n    app: zaqar\n    version: #!VERSION!#\n    env: #!ENV!#\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: zaqar\n      env: #!ENV!#\n  template:\n    metadata:\n      labels:\n        app: zaqar\n        version: #!VERSION!#\n        env: #!ENV!#\n    spec:\n      containers:\n        - name: zaqar\n          image: "khaosdoctor/zaqar:#!VERSION!#"\n          imagePullPolicy: IfNotPresent\n          env:\n            - name: SENDGRID_APIKEY\n              value: "#!SENDGRID_KEY!#"\n            - name: DEFAULT_FROM_ADDRESS\n              value: "#!FROM_ADDR!#"\n            - name: DEFAULT_FROM_NAME\n              value: "#!FROM_NAME!#"\n          ports:\n            - name: http\n              containerPort: 3000\n              protocol: TCP\n          resources:\n            requests:\n              cpu: 100m\n              memory: 128Mi\n            limits:\n              cpu: 250m\n              memory: 256Mi\n')))}m.isMDXComponent=!0}}]);