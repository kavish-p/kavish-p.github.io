"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[9],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>_});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=r.createContext({}),c=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},u=function(e){var n=c(e.components);return r.createElement(l.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),d=c(t),_=a,m=d["".concat(l,".").concat(_)]||d[_]||p[_]||o;return t?r.createElement(m,s(s({ref:n},u),{},{components:t})):r.createElement(m,s({ref:n},u))}));function _(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,s=new Array(o);s[0]=d;var i={};for(var l in n)hasOwnProperty.call(n,l)&&(i[l]=n[l]);i.originalType=e,i.mdxType="string"==typeof e?e:a,s[1]=i;for(var c=2;c<o;c++)s[c]=t[c];return r.createElement.apply(null,s)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},9379:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>p,frontMatter:()=>o,metadata:()=>i,toc:()=>c});var r=t(7462),a=(t(7294),t(3905));const o={},s="Terraform",i={unversionedId:"terraform",id:"terraform",title:"Terraform",description:"Introduction",source:"@site/docs/terraform.md",sourceDirName:".",slug:"/terraform",permalink:"/terraform",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"SonarQube",permalink:"/static-code-analysis/sonarqube"}},l={},c=[{value:"Introduction",id:"introduction",level:2},{value:"Concepts",id:"concepts",level:2},{value:"State File",id:"state-file",level:3},{value:"Basic Usage",id:"basic-usage",level:2},{value:"Remote Backend",id:"remote-backend",level:2},{value:"Terraform Cloud",id:"terraform-cloud",level:3},{value:"AWS",id:"aws",level:3},{value:"Sample Basic Terraform Script",id:"sample-basic-terraform-script",level:2},{value:"Variables",id:"variables",level:2},{value:"Input Variables",id:"input-variables",level:3},{value:"Local Variables",id:"local-variables",level:3},{value:"Output Variables",id:"output-variables",level:3}],u={toc:c};function p(e){let{components:n,...t}=e;return(0,a.kt)("wrapper",(0,r.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"terraform"},"Terraform"),(0,a.kt)("h2",{id:"introduction"},"Introduction"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Terraform is a tool for building, changing, and versioning infrastructure safely and efficiently."),(0,a.kt)("li",{parentName:"ul"},"Enables application software best practices to infrastructure"),(0,a.kt)("li",{parentName:"ul"},"Compatible with many clouds and services ")),(0,a.kt)("h2",{id:"concepts"},"Concepts"),(0,a.kt)("h3",{id:"state-file"},"State File"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Terraform's representation of the world"),(0,a.kt)("li",{parentName:"ul"},"JSON file containing information about every resource and data object"),(0,a.kt)("li",{parentName:"ul"},"Contains sensitive information (e.g database password)"),(0,a.kt)("li",{parentName:"ul"},"Can be stored locally or remotely")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'{\n  "version": 4,\n  "terraform_version": "0.12.0",\n  "serial": 1,\n  "lineage": "1f2087f9-4b3c-1b66-65db-8b78faafc6fb",\n  "outputs": {},\n  "resources": [\n    {\n      "mode": "managed",\n      "type": "aws_instance",\n      "name": "example",\n      "provider": "provider.aws",\n      "instances": [\n        {\n          "schema_version": 1,\n          "attributes": {\n            "ami": "ami-0c55b159cbfafe1f0",\n            "availability_zone": "us-east-2c",\n            "id": "i-00d689a0acc43af0f",\n            "instance_state": "running",\n            "instance_type": "t2.micro",\n            "(...)": "(truncated)"\n          }\n        }\n      ]\n    }\n  ]\n}\n')),(0,a.kt)("h2",{id:"basic-usage"},"Basic Usage"),(0,a.kt)("p",null,"Download associated providers and modules into working directory."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"terraform init\n")),(0,a.kt)("p",null,"\\\nTakes the defined state in the configuration and compares with the actual Terraform state"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"terraform plan\n")),(0,a.kt)("p",null,"\\\nUse the API of the providers and makes changes to the infrastructure to match the desired state and the actual state."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"terraform apply\n")),(0,a.kt)("p",null,"\\\nDestroy all resources at the end of a project"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"terraform destroy\n")),(0,a.kt)("h2",{id:"remote-backend"},"Remote Backend"),(0,a.kt)("h3",{id:"terraform-cloud"},"Terraform Cloud"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'terraform {\n  backend "remote" {\n    organization = "my-org"\n\n    workspaces {\n      name = "my-workspace"\n    }\n  }\n}\n')),(0,a.kt)("h3",{id:"aws"},"AWS"),(0,a.kt)("p",null,"S3 Bucket used for storage\nDynamoDB used for locking state"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'terraform {\n  backend "s3" {\n    bucket          = "sample-bucket"\n    key             = "tf-infra/terraform.tfstate"\n    region          = "us-east-1"\n    dynamodb_table  = "terraform-state-locking"\n  encrypt           = true\n  }\n}\n')),(0,a.kt)("h2",{id:"sample-basic-terraform-script"},"Sample Basic Terraform Script"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'terraform {\n  # Assumes s3 bucket and dynamo DB table already set up\n  # See /code/03-basics/aws-backend\n  backend "s3" {\n    bucket         = "devops-directive-tf-state"\n    key            = "03-basics/web-app/terraform.tfstate"\n    region         = "us-east-1"\n    dynamodb_table = "terraform-state-locking"\n    encrypt        = true\n  }\n\n  required_providers {\n    aws = {\n      source  = "hashicorp/aws"\n      version = "~> 3.0"\n    }\n  }\n}\n\nprovider "aws" {\n  region = "us-east-1"\n}\n\nresource "aws_instance" "instance_1" {\n  ami             = "ami-011899242bb902164" # Ubuntu 20.04 LTS // us-east-1\n  instance_type   = "t2.micro"\n  security_groups = [aws_security_group.instances.name]\n  user_data       = <<-EOF\n              #!/bin/bash\n              echo "Hello, World 1" > index.html\n              python3 -m http.server 8080 &\n              EOF\n}\n\nresource "aws_instance" "instance_2" {\n  ami             = "ami-011899242bb902164" # Ubuntu 20.04 LTS // us-east-1\n  instance_type   = "t2.micro"\n  security_groups = [aws_security_group.instances.name]\n  user_data       = <<-EOF\n              #!/bin/bash\n              echo "Hello, World 2" > index.html\n              python3 -m http.server 8080 &\n              EOF\n}\n\nresource "aws_s3_bucket" "bucket" {\n  bucket        = "devops-directive-web-app-data"\n  force_destroy = true\n}\n\nresource "aws_s3_bucket_versioning" "bucket_versioning" {\n  bucket = aws_s3_bucket.bucket.id\n  versioning_configuration {\n    status = "Enabled"\n  }\n}\n\nresource "aws_s3_bucket_server_side_encryption_configuration" "bucket_crypto_conf" {\n  bucket        = aws_s3_bucket.bucket.bucket\n  rule {\n    apply_server_side_encryption_by_default {\n      sse_algorithm = "AES256"\n    }\n  }\n}\n\ndata "aws_vpc" "default_vpc" {\n  default = true\n}\n\ndata "aws_subnet_ids" "default_subnet" {\n  vpc_id = data.aws_vpc.default_vpc.id\n}\n\nresource "aws_security_group" "instances" {\n  name = "instance-security-group"\n}\n\nresource "aws_security_group_rule" "allow_http_inbound" {\n  type              = "ingress"\n  security_group_id = aws_security_group.instances.id\n\n  from_port   = 8080\n  to_port     = 8080\n  protocol    = "tcp"\n  cidr_blocks = ["0.0.0.0/0"]\n}\n\nresource "aws_lb_listener" "http" {\n  load_balancer_arn = aws_lb.load_balancer.arn\n\n  port = 80\n\n  protocol = "HTTP"\n\n  # By default, return a simple 404 page\n  default_action {\n    type = "fixed-response"\n\n    fixed_response {\n      content_type = "text/plain"\n      message_body = "404: page not found"\n      status_code  = 404\n    }\n  }\n}\n\nresource "aws_lb_target_group" "instances" {\n  name     = "example-target-group"\n  port     = 8080\n  protocol = "HTTP"\n  vpc_id   = data.aws_vpc.default_vpc.id\n\n  health_check {\n    path                = "/"\n    protocol            = "HTTP"\n    matcher             = "200"\n    interval            = 15\n    timeout             = 3\n    healthy_threshold   = 2\n    unhealthy_threshold = 2\n  }\n}\n\nresource "aws_lb_target_group_attachment" "instance_1" {\n  target_group_arn = aws_lb_target_group.instances.arn\n  target_id        = aws_instance.instance_1.id\n  port             = 8080\n}\n\nresource "aws_lb_target_group_attachment" "instance_2" {\n  target_group_arn = aws_lb_target_group.instances.arn\n  target_id        = aws_instance.instance_2.id\n  port             = 8080\n}\n\nresource "aws_lb_listener_rule" "instances" {\n  listener_arn = aws_lb_listener.http.arn\n  priority     = 100\n\n  condition {\n    path_pattern {\n      values = ["*"]\n    }\n  }\n\n  action {\n    type             = "forward"\n    target_group_arn = aws_lb_target_group.instances.arn\n  }\n}\n\n\nresource "aws_security_group" "alb" {\n  name = "alb-security-group"\n}\n\nresource "aws_security_group_rule" "allow_alb_http_inbound" {\n  type              = "ingress"\n  security_group_id = aws_security_group.alb.id\n\n  from_port   = 80\n  to_port     = 80\n  protocol    = "tcp"\n  cidr_blocks = ["0.0.0.0/0"]\n\n}\n\nresource "aws_security_group_rule" "allow_alb_all_outbound" {\n  type              = "egress"\n  security_group_id = aws_security_group.alb.id\n\n  from_port   = 0\n  to_port     = 0\n  protocol    = "-1"\n  cidr_blocks = ["0.0.0.0/0"]\n\n}\n\n\nresource "aws_lb" "load_balancer" {\n  name               = "web-app-lb"\n  load_balancer_type = "application"\n  subnets            = data.aws_subnet_ids.default_subnet.ids\n  security_groups    = [aws_security_group.alb.id]\n\n}\n\nresource "aws_route53_zone" "primary" {\n  name = "devopsdeployed.com"\n}\n\nresource "aws_route53_record" "root" {\n  zone_id = aws_route53_zone.primary.zone_id\n  name    = "devopsdeployed.com"\n  type    = "A"\n\n  alias {\n    name                   = aws_lb.load_balancer.dns_name\n    zone_id                = aws_lb.load_balancer.zone_id\n    evaluate_target_health = true\n  }\n}\n\nresource "aws_db_instance" "db_instance" {\n  allocated_storage          = 20\n  # This allows any minor version within the major engine_version\n  # defined below, but will also result in allowing AWS to auto\n  # upgrade the minor version of your DB. This may be too risky\n  # in a real production environment.\n  auto_minor_version_upgrade = true\n  storage_type               = "standard"\n  engine                     = "postgres"\n  engine_version             = "12"\n  instance_class             = "db.t2.micro"\n  name                       = "mydb"\n  username                   = "foo"\n  password                   = "foobarbaz"\n  skip_final_snapshot        = true\n}\n')),(0,a.kt)("h2",{id:"variables"},"Variables"),(0,a.kt)("h3",{id:"input-variables"},"Input Variables"),(0,a.kt)("p",null,"Referenced using var.","[name]"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'variable "" {\n  description = "ec2 instance type"\n  type        = string\n  default     = "t2.micro"\n}\n')),(0,a.kt)("h3",{id:"local-variables"},"Local Variables"),(0,a.kt)("p",null,"Referenced using local.","[name]"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'locals {\n  service_name  = "My Service"\n  owner         = "sample value"\n}\n')),(0,a.kt)("h3",{id:"output-variables"},"Output Variables"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'output "instance_ip_addr" {\n  value = aws_instance.instance.private_ip\n}\n\noutput "db_instance_addr" {\n  value = aws_db_instance.db_instance.address\n}\n')))}p.isMDXComponent=!0}}]);